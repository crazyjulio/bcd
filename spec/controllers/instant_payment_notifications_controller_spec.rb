require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe InstantPaymentNotificationsController do
  before do
    @radmin ||= FactoryGirl.create(:radmin)
    @product_type = FactoryGirl.create(:product_type)
  end

  before(:each) do |example|
    sign_in @radmin unless example.metadata[:skip_before]
  end

  # This should return the minimal set of attributes required to create a valid
  # InstantPaymentNotification. As you add validations to InstantPaymentNotification, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      payer_email: 'test@test.com',
      notify_version: '3.8'
    }
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new InstantPaymentNotification', :skip_before do
        expect do
          post :create, params: { instant_payment_notification: valid_attributes }
        end.to change(InstantPaymentNotification, :count).by(1)
      end

      it 'returns a 200', :skip_before do
        post :create, params: { instant_payment_notification: valid_attributes }
        expect(response.status).to eq(200)
      end
    end
  end
end
